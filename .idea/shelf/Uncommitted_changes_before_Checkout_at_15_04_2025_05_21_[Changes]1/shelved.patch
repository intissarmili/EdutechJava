Index: src/main/resources/back/avaibility/update.fxml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/resources/back/avaibility/update.fxml b/src/main/resources/back/avaibility/update.fxml
new file mode 100644
--- /dev/null	(date 1744687025767)
+++ b/src/main/resources/back/avaibility/update.fxml	(date 1744687025767)
@@ -0,0 +1,51 @@
+<?xml version="1.0" encoding="UTF-8"?>
+
+<?import javafx.geometry.Insets?>
+<?import javafx.scene.control.*?>
+<?import javafx.scene.layout.*?>
+<?import javafx.scene.text.Font?>
+
+<AnchorPane prefHeight="520.0" prefWidth="650.0"
+            xmlns="http://javafx.com/javafx/8.0.171"
+            xmlns:fx="http://javafx.com/fxml/1"
+            fx:controller="controllers.back.ModifierAvaibilityController">
+
+    <VBox alignment="TOP_CENTER" layoutX="60.0" layoutY="30.0" spacing="25.0" prefWidth="530.0">
+        <Label text="Modifier la Disponibilité" styleClass="form-title" />
+
+        <!-- Date -->
+        <VBox spacing="5.0">
+            <Label text="Date" />
+            <DatePicker fx:id="datePicker" prefHeight="30.0" />
+            <Label fx:id="dateErrorLabel" textFill="RED" />
+        </VBox>
+
+        <!-- Heure de début -->
+        <VBox spacing="5.0">
+            <Label text="Heure de début" />
+            <HBox spacing="10.0">
+                <ComboBox fx:id="startHourComboBox" prefWidth="120.0" promptText="Heure" />
+                <Label text=":"/>
+                <ComboBox fx:id="startMinuteComboBox" prefWidth="120.0" promptText="Min" />
+            </HBox>
+            <Label fx:id="startTimeErrorLabel" textFill="RED" />
+        </VBox>
+
+        <!-- Heure de fin -->
+        <VBox spacing="5.0">
+            <Label text="Heure de fin" />
+            <HBox spacing="10.0">
+                <ComboBox fx:id="endHourComboBox" prefWidth="120.0" promptText="Heure" />
+                <Label text=":"/>
+                <ComboBox fx:id="endMinuteComboBox" prefWidth="120.0" promptText="Min" />
+            </HBox>
+            <Label fx:id="endTimeErrorLabel" textFill="RED" />
+        </VBox>
+
+        <!-- Boutons -->
+        <HBox spacing="20.0" alignment="CENTER">
+            <Button text="Annuler" onAction="#cancelAction" styleClass="cancel-button" />
+            <Button text="Mettre à jour" onAction="#updateAvaibilityAction" styleClass="save-button" />
+        </HBox>
+    </VBox>
+</AnchorPane>
Index: src/main/resources/back/avaibility/details.fxml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/resources/back/avaibility/details.fxml b/src/main/resources/back/avaibility/details.fxml
new file mode 100644
--- /dev/null	(date 1744687025811)
+++ b/src/main/resources/back/avaibility/details.fxml	(date 1744687025811)
@@ -0,0 +1,45 @@
+<?xml version="1.0" encoding="UTF-8"?>
+
+<?import javafx.scene.control.*?>
+<?import javafx.scene.layout.*?>
+
+<AnchorPane xmlns="http://javafx.com/javafx"
+            xmlns:fx="http://javafx.com/fxml"
+            fx:controller="controllers.DetailAvaibilityController"
+            stylesheets="@../../styles/style.css"
+            prefHeight="520.0" prefWidth="650.0">
+
+    <VBox spacing="25" alignment="TOP_LEFT"
+          AnchorPane.topAnchor="30" AnchorPane.leftAnchor="30"
+          AnchorPane.rightAnchor="30" AnchorPane.bottomAnchor="30"
+          styleClass="form-container">
+
+        <Label text="Détails de la Disponibilité" styleClass="form-title"/>
+
+        <GridPane hgap="15" vgap="18">
+            <Label text="Date :" GridPane.rowIndex="0" GridPane.columnIndex="0"/>
+            <Label fx:id="dateLabel" GridPane.rowIndex="0" GridPane.columnIndex="1"/>
+
+            <Label text="Heure de début :" GridPane.rowIndex="1" GridPane.columnIndex="0"/>
+            <Label fx:id="startTimeLabel" GridPane.rowIndex="1" GridPane.columnIndex="1"/>
+
+            <Label text="Heure de fin :" GridPane.rowIndex="2" GridPane.columnIndex="0"/>
+            <Label fx:id="endTimeLabel" GridPane.rowIndex="2" GridPane.columnIndex="1"/>
+
+            <Label text="Durée :" GridPane.rowIndex="3" GridPane.columnIndex="0"/>
+            <Label fx:id="durationLabel" GridPane.rowIndex="3" GridPane.columnIndex="1"/>
+
+            <Label text="Tuteur :" GridPane.rowIndex="4" GridPane.columnIndex="0"/>
+            <Label fx:id="tutorLabel" GridPane.rowIndex="4" GridPane.columnIndex="1"/>
+
+            <Label text="Statut :" GridPane.rowIndex="5" GridPane.columnIndex="0"/>
+            <Label fx:id="statusLabel" GridPane.rowIndex="5" GridPane.columnIndex="1"/>
+        </GridPane>
+
+        <HBox spacing="15" alignment="CENTER_LEFT">
+            <Button text="Retour" onAction="#backAction" styleClass="cancel-button"/>
+            <Button text="Supprimer" onAction="#handleDelete" style="-fx-background-color: #d9534f; -fx-text-fill: white;"/>
+            <Button text="Modifier" onAction="#handleUpdate" styleClass="save-button"/>
+        </HBox>
+    </VBox>
+</AnchorPane>
Index: src/main/resources/back/avaibility/create.fxml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/resources/back/avaibility/create.fxml b/src/main/resources/back/avaibility/create.fxml
new file mode 100644
--- /dev/null	(date 1744687025787)
+++ b/src/main/resources/back/avaibility/create.fxml	(date 1744687025787)
@@ -0,0 +1,64 @@
+<?xml version="1.0" encoding="UTF-8"?>
+
+<?import javafx.scene.control.*?>
+<?import javafx.scene.layout.*?>
+<?import javafx.geometry.Insets?>
+<?import javafx.scene.text.*?>
+
+<AnchorPane xmlns="http://javafx.com/javafx"
+            xmlns:fx="http://javafx.com/fxml"
+            fx:controller="controllers.AjouterAvaibilityController"
+            stylesheets="@../../styles/style.css"
+            prefHeight="520.0" prefWidth="650.0">
+
+    <VBox spacing="25" AnchorPane.topAnchor="30.0" AnchorPane.leftAnchor="40.0"
+          AnchorPane.rightAnchor="40.0" AnchorPane.bottomAnchor="30.0"
+          styleClass="form-container">
+
+        <Label text="Ajouter une Disponibilité"
+               styleClass="form-title"/>
+
+        <GridPane hgap="12" vgap="20">
+            <padding>
+                <Insets top="10" />
+            </padding>
+
+            <columnConstraints>
+                <ColumnConstraints minWidth="150" />
+                <ColumnConstraints prefWidth="400" hgrow="ALWAYS" />
+            </columnConstraints>
+
+            <Label text="Date :" GridPane.rowIndex="0" GridPane.columnIndex="0" />
+            <VBox spacing="4" GridPane.rowIndex="0" GridPane.columnIndex="1">
+                <DatePicker fx:id="datePicker" promptText="Sélectionner une date" styleClass="input-field"/>
+                <Label fx:id="dateErrorLabel" textFill="red" styleClass="error-label" />
+            </VBox>
+
+            <Label text="Début :" GridPane.rowIndex="1" GridPane.columnIndex="0" />
+            <VBox spacing="4" GridPane.rowIndex="1" GridPane.columnIndex="1">
+                <HBox spacing="10">
+                    <ComboBox fx:id="startHourComboBox" prefWidth="90" promptText="Heure" />
+                    <Label text=":"/>
+                    <ComboBox fx:id="startMinuteComboBox" prefWidth="90" promptText="Min" />
+                </HBox>
+                <Label fx:id="startTimeErrorLabel" textFill="red" />
+            </VBox>
+
+            <Label text="Fin :" GridPane.rowIndex="2" GridPane.columnIndex="0" />
+            <VBox spacing="4" GridPane.rowIndex="2" GridPane.columnIndex="1">
+                <HBox spacing="10">
+                    <ComboBox fx:id="endHourComboBox" prefWidth="90" promptText="Heure" />
+                    <Label text=":"/>
+                    <ComboBox fx:id="endMinuteComboBox" prefWidth="90" promptText="Min" />
+                </HBox>
+                <Label fx:id="endTimeErrorLabel" textFill="red" />
+            </VBox>
+        </GridPane>
+
+        <HBox spacing="15" alignment="CENTER_RIGHT">
+            <Button text="Annuler" fx:id="cancelButton" onAction="#cancelAction" styleClass="cancel-button" />
+            <Button text="Enregistrer" fx:id="saveButton" onAction="#saveavaibilityAction" styleClass="save-button" />
+            <Button text="Retour à la liste" fx:id="BackButton" onAction="#handleCancelOrBack" />
+        </HBox>
+    </VBox>
+</AnchorPane>
Index: src/main/resources/back/reservation/list.fxml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/resources/back/reservation/list.fxml b/src/main/resources/back/reservation/list.fxml
new file mode 100644
--- /dev/null	(date 1744679512574)
+++ b/src/main/resources/back/reservation/list.fxml	(date 1744679512574)
@@ -0,0 +1,16 @@
+<?xml version="1.0" encoding="UTF-8"?>
+
+<?import javafx.scene.control.*?>
+<?import javafx.scene.layout.*?>
+
+<AnchorPane xmlns:fx="http://javafx.com/fxml" fx:controller="controllers.ReservationListController">
+    <TableView fx:id="reservationTable" layoutX="14" layoutY="14" prefWidth="600" prefHeight="400">
+        <columns>
+            <TableColumn fx:id="idColumn" text="ID" prefWidth="50"/>
+            <TableColumn fx:id="topicColumn" text="Topic" prefWidth="100"/>
+            <TableColumn fx:id="startTimeColumn" text="Start Time" prefWidth="150"/>
+            <TableColumn fx:id="statusColumn" text="Status" prefWidth="100"/>
+            <TableColumn fx:id="durationColumn" text="Duration (min)" prefWidth="100"/>
+        </columns>
+    </TableView>
+</AnchorPane>
Index: src/main/resources/back/avaibility/listCards.fxml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/resources/back/avaibility/listCards.fxml b/src/main/resources/back/avaibility/listCards.fxml
new file mode 100644
--- /dev/null	(date 1744687025776)
+++ b/src/main/resources/back/avaibility/listCards.fxml	(date 1744687025776)
@@ -0,0 +1,57 @@
+<?xml version="1.0" encoding="UTF-8"?>
+
+<?import javafx.scene.control.*?>
+<?import javafx.scene.layout.*?>
+<?import javafx.scene.text.*?>
+<?import javafx.geometry.Insets?>
+
+<AnchorPane xmlns="http://javafx.com/javafx/11.0.1"
+            xmlns:fx="http://javafx.com/fxml/1"
+            fx:controller="controllers.back.ListAvaibilityController"
+            style="-fx-background-color: #ECEFF1;">
+
+    <!-- Header -->
+    <HBox spacing="20" layoutX="20" layoutY="20"
+          AnchorPane.leftAnchor="20" AnchorPane.rightAnchor="20">
+        <Label text="Availability Management"
+               style="-fx-font-size: 22px; -fx-text-fill: #2C3E50; -fx-font-weight: bold;"
+               HBox.hgrow="ALWAYS"/>
+
+        <Button text="Add"
+                fx:id="addButton"
+                style="-fx-background-color: #34495E; -fx-text-fill: white; -fx-font-weight: bold;"
+                onAction="#handleAddAvaibility"/>
+    </HBox>
+
+    <!-- Main content area -->
+    <StackPane fx:id="contentPane"
+               layoutX="20" layoutY="70"
+               AnchorPane.leftAnchor="20" AnchorPane.rightAnchor="20"
+               AnchorPane.topAnchor="70" AnchorPane.bottomAnchor="20"
+               style="-fx-background-color: #F7F9FA; -fx-border-color: #B0BEC5; -fx-border-radius: 4; -fx-padding: 10;">
+
+        <!-- List View -->
+        <ScrollPane fitToWidth="true" style="-fx-background-color: transparent;">
+            <VBox fx:id="cardsContainer" spacing="12" style="-fx-padding: 10;"/>
+        </ScrollPane>
+
+        <!-- Details View -->
+        <AnchorPane fx:id="detailsPane" visible="false"
+                    style="-fx-background-color: white; -fx-border-color: #CFD8DC; -fx-border-width: 1; -fx-border-radius: 6;">
+            <Label fx:id="detailsTitle" text="Availability Details"
+                   style="-fx-font-size: 18px; -fx-font-weight: bold; -fx-text-fill: #2C3E50;"
+                   layoutX="20" layoutY="20"/>
+
+            <VBox spacing="8" layoutX="20" layoutY="60">
+                <Label fx:id="detailsDate" style="-fx-font-size: 14; -fx-text-fill: #37474F;"/>
+                <Label fx:id="detailsTime" style="-fx-font-size: 14; -fx-text-fill: #37474F;"/>
+                <Label fx:id="detailsTutor" style="-fx-font-size: 14; -fx-text-fill: #37474F;"/>
+
+                <Button text="Back" onAction="#handleBackToList"
+                        style="-fx-background-color: #546E7A; -fx-text-fill: white;"/>
+            </VBox>
+        </AnchorPane>
+
+    </StackPane>
+
+</AnchorPane>
Index: src/main/resources/back/avaibility/AvaibilityCard.fxml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/resources/back/avaibility/AvaibilityCard.fxml b/src/main/resources/back/avaibility/AvaibilityCard.fxml
new file mode 100644
--- /dev/null	(date 1744686244625)
+++ b/src/main/resources/back/avaibility/AvaibilityCard.fxml	(date 1744686244625)
@@ -0,0 +1,21 @@
+<?xml version="1.0" encoding="UTF-8"?>
+
+<?import javafx.scene.control.*?>
+<?import javafx.scene.layout.*?>
+<?import javafx.scene.text.*?>
+
+<VBox xmlns="http://javafx.com/javafx/11.0.1" xmlns:fx="http://javafx.com/fxml/1"
+      style="-fx-background-color: #FFFFFF; -fx-padding: 15; -fx-border-color: #B0BEC5; -fx-border-width: 1; -fx-border-radius: 5; -fx-effect: dropshadow(three-pass-box, rgba(0,0,0,0.05), 5, 0.1, 0, 2);"
+      spacing="10" prefWidth="360">
+
+    <Label fx:id="dateLabel" style="-fx-font-weight: bold; -fx-font-size: 14; -fx-text-fill: #2C3E50;"/>
+    <Label fx:id="timeLabel" style="-fx-text-fill: #455A64;"/>
+    <Label fx:id="tutorLabel" style="-fx-text-fill: #455A64;"/>
+
+    <HBox spacing="8">
+        <Button fx:id="detailsButton" text="View"
+                style="-fx-background-color: #90A4AE; -fx-text-fill: white; -fx-font-size: 12;"/>
+        <Button fx:id="reserveButton" text="Reserve"
+                style="-fx-background-color: #43A047; -fx-text-fill: white; -fx-font-size: 12;"/>
+    </HBox>
+</VBox>
Index: src/main/resources/back/reservation/details.fxml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/resources/back/reservation/details.fxml b/src/main/resources/back/reservation/details.fxml
new file mode 100644
--- /dev/null	(date 1744589682998)
+++ b/src/main/resources/back/reservation/details.fxml	(date 1744589682998)
@@ -0,0 +1,46 @@
+<?xml version="1.0" encoding="UTF-8"?>
+
+<?import javafx.scene.control.*?>
+<?import javafx.scene.layout.*?>
+
+<AnchorPane xmlns="http://javafx.com/javafx"
+            xmlns:fx="http://javafx.com/fxml"
+            fx:controller="controllers.DetailReservationController"
+            stylesheets="@../styles/style.css"
+            prefHeight="520.0" prefWidth="650.0">
+
+    <VBox spacing="20" alignment="TOP_LEFT"
+          AnchorPane.topAnchor="20" AnchorPane.leftAnchor="20"
+          AnchorPane.rightAnchor="20" AnchorPane.bottomAnchor="20"
+          styleClass="form-container">
+
+        <!-- Titre -->
+        <Label text="Détails de la réservation" styleClass="form-title"/>
+
+        <!-- Détails de la réservation -->
+        <GridPane hgap="10" vgap="15">
+            <Label text="Sujet :" GridPane.rowIndex="0" GridPane.columnIndex="0"/>
+            <Label fx:id="topicLabel" GridPane.rowIndex="0" GridPane.columnIndex="1"/>
+
+            <Label text="Date :" GridPane.rowIndex="1" GridPane.columnIndex="0"/>
+            <Label fx:id="dateLabel" GridPane.rowIndex="1" GridPane.columnIndex="1"/>
+
+            <Label text="Heure :" GridPane.rowIndex="2" GridPane.columnIndex="0"/>
+            <Label fx:id="timeLabel" GridPane.rowIndex="2" GridPane.columnIndex="1"/>
+
+            <Label text="Durée :" GridPane.rowIndex="3" GridPane.columnIndex="0"/>
+            <Label fx:id="durationLabel" GridPane.rowIndex="3" GridPane.columnIndex="1"/>
+
+            <Label text="Statut :" GridPane.rowIndex="4" GridPane.columnIndex="0"/>
+            <Label fx:id="statusLabel" GridPane.rowIndex="4" GridPane.columnIndex="1"/>
+        </GridPane>
+
+        <!-- Boutons d'action -->
+        <HBox spacing="10">
+            <Button text="Retour" onAction="#backAction" styleClass="cancel-button"/>
+            <Button text="Supprimer" onAction="#handleDelete" styleClass="button" style="-fx-background-color: -fx-error-color; -fx-text-fill: white;"/>
+            <Button text="Modifier la réservation" onAction="#handleUpdate" styleClass="save-button"/>
+        </HBox>
+
+    </VBox>
+</AnchorPane>
Index: src/main/java/controllers/back/ModifierAvaibilityController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/controllers/back/ModifierAvaibilityController.java b/src/main/java/controllers/back/ModifierAvaibilityController.java
new file mode 100644
--- /dev/null	(date 1744686592281)
+++ b/src/main/java/controllers/back/ModifierAvaibilityController.java	(date 1744686592281)
@@ -0,0 +1,290 @@
+package controllers.back;
+
+import javafx.collections.FXCollections;
+import javafx.collections.ObservableList;
+import javafx.event.ActionEvent;
+import javafx.fxml.FXML;
+import javafx.fxml.FXMLLoader;
+import javafx.fxml.Initializable;
+import javafx.scene.Parent;
+import javafx.scene.control.*;
+import models.avaibility;
+import service.AvaibilityService;
+
+import java.io.IOException;
+import java.net.URL;
+import java.sql.SQLException;
+import java.time.LocalDate;
+import java.time.LocalTime;
+import java.util.ResourceBundle;
+
+public class ModifierAvaibilityController implements Initializable {
+
+    @FXML
+    private DatePicker datePicker;
+
+    @FXML
+    private ComboBox<String> startHourComboBox;
+
+    @FXML
+    private ComboBox<String> startMinuteComboBox;
+
+    @FXML
+    private ComboBox<String> endHourComboBox;
+
+    @FXML
+    private ComboBox<String> endMinuteComboBox;
+
+    @FXML
+    private Label dateErrorLabel;
+
+    @FXML
+    private Label startTimeErrorLabel;
+
+    @FXML
+    private Label endTimeErrorLabel;
+
+    private avaibility currentAvaibility;
+    private AvaibilityService avaibilityService;
+
+    @Override
+    public void initialize(URL url, ResourceBundle rb) {
+        avaibilityService = new AvaibilityService();
+
+        ObservableList<String> hours = FXCollections.observableArrayList();
+        ObservableList<String> minutes = FXCollections.observableArrayList();
+
+        for (int i = 0; i < 24; i++) {
+            hours.add(String.format("%02d", i));
+        }
+
+        for (int i = 0; i < 60; i += 5) {
+            minutes.add(String.format("%02d", i));
+        }
+
+        startHourComboBox.setItems(hours);
+        startMinuteComboBox.setItems(minutes);
+        endHourComboBox.setItems(hours);
+        endMinuteComboBox.setItems(minutes);
+
+        // Restrict date selection to only today and next month
+        datePicker.setDayCellFactory(picker -> new DateCell() {
+            @Override
+            public void updateItem(LocalDate date, boolean empty) {
+                super.updateItem(date, empty);
+                LocalDate today = LocalDate.now();
+                LocalDate oneMonthLater = today.plusMonths(1);
+
+                setDisable(empty || date.compareTo(today) < 0 || date.compareTo(oneMonthLater) > 0);
+
+                if (date.compareTo(today) < 0 || date.compareTo(oneMonthLater) > 0) {
+                    setStyle("-fx-background-color: #ffc0cb;"); // Light red for invalid dates
+                }
+            }
+        });
+
+        dateErrorLabel.setVisible(false);
+        startTimeErrorLabel.setVisible(false);
+        endTimeErrorLabel.setVisible(false);
+
+        // Add listeners to validate end time > start time when selection changes
+        startHourComboBox.getSelectionModel().selectedItemProperty().addListener((obs, oldVal, newVal) -> validateTimes());
+        startMinuteComboBox.getSelectionModel().selectedItemProperty().addListener((obs, oldVal, newVal) -> validateTimes());
+        endHourComboBox.getSelectionModel().selectedItemProperty().addListener((obs, oldVal, newVal) -> validateTimes());
+        endMinuteComboBox.getSelectionModel().selectedItemProperty().addListener((obs, oldVal, newVal) -> validateTimes());
+    }
+
+    public void setAvaibilityToUpdate(avaibility avaibility) {
+        this.currentAvaibility = avaibility;
+        populateFields();
+    }
+
+    public void loadAvaibility(int id) {
+        try {
+            currentAvaibility = avaibilityService.getById(id);
+            if(currentAvaibility != null) {
+                populateFields();
+            } else {
+                showAlert(Alert.AlertType.ERROR, "Erreur", "Disponibilité non trouvée.");
+                cancelAction(null);
+            }
+        } catch (SQLException e) {
+            showAlert(Alert.AlertType.ERROR, "Erreur", "Erreur lors du chargement de la disponibilité: " + e.getMessage());
+        }
+    }
+
+    private void populateFields() {
+        if(currentAvaibility == null) return;
+
+        // Set the date
+        try {
+            LocalDate date = LocalDate.parse(currentAvaibility.getDate());
+            datePicker.setValue(date);
+        } catch (Exception e) {
+            // Handle date parsing error
+            showAlert(Alert.AlertType.WARNING, "Avertissement", "Format de date invalide. Utilisation de la date actuelle.");
+            datePicker.setValue(LocalDate.now());
+        }
+
+        // Set the start time
+        try {
+            LocalTime startTime = LocalTime.parse(currentAvaibility.getStartTime());
+            startHourComboBox.setValue(String.format("%02d", startTime.getHour()));
+            startMinuteComboBox.setValue(String.format("%02d", startTime.getMinute()));
+        } catch (Exception e) {
+            // Handle time parsing error
+            startHourComboBox.setValue("09");
+            startMinuteComboBox.setValue("00");
+        }
+
+        // Set the end time
+        try {
+            LocalTime endTime = LocalTime.parse(currentAvaibility.getEndTime());
+            endHourComboBox.setValue(String.format("%02d", endTime.getHour()));
+            endMinuteComboBox.setValue(String.format("%02d", endTime.getMinute()));
+        } catch (Exception e) {
+            // Handle time parsing error
+            endHourComboBox.setValue("10");
+            endMinuteComboBox.setValue("00");
+        }
+    }
+
+    private void validateTimes() {
+        String sh = startHourComboBox.getValue();
+        String sm = startMinuteComboBox.getValue();
+        String eh = endHourComboBox.getValue();
+        String em = endMinuteComboBox.getValue();
+
+        // Only validate if all values are selected
+        if (sh != null && sm != null && eh != null && em != null) {
+            try {
+                LocalTime start = LocalTime.of(Integer.parseInt(sh), Integer.parseInt(sm));
+                LocalTime end = LocalTime.of(Integer.parseInt(eh), Integer.parseInt(em));
+
+                if (!start.isBefore(end)) {
+                    endTimeErrorLabel.setText("L'heure de fin doit être après l'heure de début.");
+                    endTimeErrorLabel.setVisible(true);
+                } else {
+                    endTimeErrorLabel.setVisible(false);
+                }
+            } catch (NumberFormatException e) {
+                // Handle parsing errors
+            }
+        }
+    }
+
+    @FXML
+    void updateAvaibilityAction(ActionEvent event) {
+        dateErrorLabel.setVisible(false);
+        startTimeErrorLabel.setVisible(false);
+        endTimeErrorLabel.setVisible(false);
+
+        boolean hasError = false;
+
+        try {
+            // Vérification date
+            LocalDate date = datePicker.getValue();
+            LocalDate today = LocalDate.now();
+            LocalDate oneMonthLater = today.plusMonths(1);
+
+            if (date == null) {
+                dateErrorLabel.setText("Veuillez sélectionner une date.");
+                dateErrorLabel.setVisible(true);
+                hasError = true;
+            } else if (date.isBefore(today)) {
+                dateErrorLabel.setText("La date ne peut pas être dans le passé.");
+                dateErrorLabel.setVisible(true);
+                hasError = true;
+            } else if (date.isAfter(oneMonthLater)) {
+                dateErrorLabel.setText("La date ne peut pas être plus d'un mois dans le futur.");
+                dateErrorLabel.setVisible(true);
+                hasError = true;
+            }
+
+            // Vérification heures
+            String sh = startHourComboBox.getValue();
+            String sm = startMinuteComboBox.getValue();
+            String eh = endHourComboBox.getValue();
+            String em = endMinuteComboBox.getValue();
+
+            if (sh == null || sm == null) {
+                startTimeErrorLabel.setText("Veuillez sélectionner une heure de début.");
+                startTimeErrorLabel.setVisible(true);
+                hasError = true;
+            }
+
+            if (eh == null || em == null) {
+                endTimeErrorLabel.setText("Veuillez sélectionner une heure de fin.");
+                endTimeErrorLabel.setVisible(true);
+                hasError = true;
+            }
+
+            if (hasError) return;
+
+            LocalTime start = LocalTime.of(Integer.parseInt(sh), Integer.parseInt(sm));
+            LocalTime end = LocalTime.of(Integer.parseInt(eh), Integer.parseInt(em));
+
+            if (!start.isBefore(end)) {
+                endTimeErrorLabel.setText("L'heure de fin doit être après l'heure de début.");
+                endTimeErrorLabel.setVisible(true);
+                return;
+            }
+
+            // Update the current availability object
+            currentAvaibility.setDate(date.toString());
+            currentAvaibility.setStartTime(start.toString());
+            currentAvaibility.setEndTime(end.toString());
+
+            // Update in database
+            avaibilityService.update(currentAvaibility);
+
+            showAlert(Alert.AlertType.INFORMATION, "Succès", "Disponibilité mise à jour avec succès !");
+
+            // Redirection to details page
+            FXMLLoader loader = new FXMLLoader(getClass().getResource("/avaibility/details.fxml"));
+            Parent root = loader.load();
+
+            // Pass updated availability to details controller
+            DetailAvaibilityController detailController = loader.getController();
+            detailController.setAvaibility(currentAvaibility);
+
+            datePicker.getScene().setRoot(root);
+
+        } catch (SQLException | IOException e) {
+            e.printStackTrace();
+            showAlert(Alert.AlertType.ERROR, "Erreur", "Une erreur est survenue: " + e.getMessage());
+        }
+    }
+
+    @FXML
+    void cancelAction(ActionEvent event) {
+        try {
+            if (currentAvaibility != null) {
+                // Return to details page if we have an availability
+                FXMLLoader loader = new FXMLLoader(getClass().getResource("/avaibility/details.fxml"));
+                Parent root = loader.load();
+
+                DetailAvaibilityController detailController = loader.getController();
+                detailController.setAvaibility(currentAvaibility);
+
+                datePicker.getScene().setRoot(root);
+            } else {
+                // Return to list page if no availability
+                FXMLLoader loader = new FXMLLoader(getClass().getResource("/avaibility/list.fxml"));
+                Parent root = loader.load();
+                datePicker.getScene().setRoot(root);
+            }
+        } catch (IOException e) {
+            e.printStackTrace();
+            showAlert(Alert.AlertType.ERROR, "Erreur", "Erreur lors de la navigation: " + e.getMessage());
+        }
+    }
+
+    private void showAlert(Alert.AlertType type, String title, String message) {
+        Alert alert = new Alert(type);
+        alert.setTitle(title);
+        alert.setHeaderText(null);
+        alert.setContentText(message);
+        alert.showAndWait();
+    }
+}
\ No newline at end of file
Index: src/main/resources/back/reservation/create.fxml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/resources/back/reservation/create.fxml b/src/main/resources/back/reservation/create.fxml
new file mode 100644
--- /dev/null	(date 1744657538116)
+++ b/src/main/resources/back/reservation/create.fxml	(date 1744657538116)
@@ -0,0 +1,66 @@
+<?xml version="1.0" encoding="UTF-8"?>
+
+<?import javafx.scene.control.*?>
+<?import javafx.scene.layout.*?>
+<?import javafx.geometry.Insets?>
+<?import javafx.scene.text.*?>
+
+<AnchorPane xmlns="http://javafx.com/javafx"
+            xmlns:fx="http://javafx.com/fxml"
+            fx:controller="controllers.AjouterReservationController"
+            stylesheets="@../styles/style.css"
+            prefHeight="520.0" prefWidth="650.0">
+
+    <VBox spacing="20" AnchorPane.topAnchor="20.0" AnchorPane.leftAnchor="30.0"
+          AnchorPane.rightAnchor="30.0" AnchorPane.bottomAnchor="20.0"
+          styleClass="form-container">
+
+        <Label text="Nouvelle Réservation"
+               styleClass="form-title"/>
+
+        <GridPane hgap="10" vgap="15">
+            <padding>
+                <Insets top="10" />
+            </padding>
+
+            <columnConstraints>
+                <ColumnConstraints minWidth="120" />
+                <ColumnConstraints prefWidth="400" hgrow="ALWAYS" />
+            </columnConstraints>
+
+            <!-- Sujet -->
+            <Label text="Sujet :" GridPane.rowIndex="0" GridPane.columnIndex="0" />
+            <VBox spacing="3" GridPane.rowIndex="0" GridPane.columnIndex="1">
+                <TextField fx:id="topicField" promptText="Entrez le sujet de la réunion" styleClass="input-field"/>
+                <Label fx:id="topicErrorLabel" textFill="red" styleClass="error-label" />
+            </VBox>
+
+            <!-- Date et Heure -->
+            <Label text="Début :" GridPane.rowIndex="1" GridPane.columnIndex="0" />
+            <VBox spacing="3" GridPane.rowIndex="1" GridPane.columnIndex="1">
+                <HBox spacing="10">
+                    <DatePicker fx:id="datePicker" promptText="Choisir une date" prefWidth="160" styleClass="input-field"/>
+                    <HBox spacing="8" alignment="CENTER_LEFT">
+                        <ComboBox fx:id="hourComboBox" prefWidth="90" promptText="Heure" styleClass="time-input"/>
+                        <Label text=":"/>
+                        <ComboBox fx:id="minuteComboBox" prefWidth="90" promptText="Min" styleClass="time-input"/>
+                    </HBox>
+                </HBox>
+                <Label fx:id="dateErrorLabel" textFill="red" styleClass="error-label" />
+                <Label fx:id="timeErrorLabel" textFill="red" styleClass="error-label" />
+            </VBox>
+
+            <!-- Durée -->
+            <Label text="Durée (min) :" GridPane.rowIndex="2" GridPane.columnIndex="0" />
+            <VBox spacing="3" GridPane.rowIndex="2" GridPane.columnIndex="1">
+                <ComboBox fx:id="durationComboBox" prefWidth="200" styleClass="input-field"/>
+                <Label fx:id="durationErrorLabel" textFill="red" styleClass="error-label" />
+            </VBox>
+        </GridPane>
+
+        <HBox spacing="20" alignment="CENTER_RIGHT">
+            <Button text="Annuler" onAction="#cancelAction" styleClass="cancel-button" />
+            <Button text="Enregistrer" onAction="#saveReservationAction" styleClass="save-button" />
+        </HBox>
+    </VBox>
+</AnchorPane>
\ No newline at end of file
Index: src/main/resources/back/reservation/update.fxml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/resources/back/reservation/update.fxml b/src/main/resources/back/reservation/update.fxml
new file mode 100644
--- /dev/null	(date 1744590500097)
+++ b/src/main/resources/back/reservation/update.fxml	(date 1744590500097)
@@ -0,0 +1,51 @@
+<?xml version="1.0" encoding="UTF-8"?>
+
+<?import javafx.scene.layout.*?>
+<?import javafx.scene.control.*?>
+<?import javafx.geometry.Insets?>
+
+<AnchorPane xmlns="http://javafx.com/javafx"
+            xmlns:fx="http://javafx.com/fxml"
+            fx:controller="controllers.ModifierReservationController"
+            stylesheets="@../styles/style.css"
+            prefHeight="500.0" prefWidth="600.0">
+
+    <VBox spacing="20" AnchorPane.topAnchor="20" AnchorPane.leftAnchor="20"
+          AnchorPane.rightAnchor="20" AnchorPane.bottomAnchor="20"
+          styleClass="form-container">
+
+        <!-- Titre -->
+        <Label text="Modifier la réservation" styleClass="form-title"/>
+
+        <GridPane hgap="10" vgap="15">
+            <padding><Insets top="10"/></padding>
+
+            <columnConstraints>
+                <ColumnConstraints minWidth="100" prefWidth="150"/>
+                <ColumnConstraints prefWidth="350" hgrow="ALWAYS"/>
+            </columnConstraints>
+
+            <!-- Sujet -->
+            <Label text="Sujet :" GridPane.rowIndex="0" GridPane.columnIndex="0"/>
+            <TextField fx:id="topicField" GridPane.rowIndex="0" GridPane.columnIndex="1"/>
+
+            <!-- Date et Heure -->
+            <Label text="Date et heure :" GridPane.rowIndex="1" GridPane.columnIndex="0"/>
+            <HBox spacing="10" GridPane.rowIndex="1" GridPane.columnIndex="1">
+                <DatePicker fx:id="datePicker" prefWidth="150"/>
+                <ComboBox fx:id="hourComboBox" prefWidth="80"/>
+                <ComboBox fx:id="minuteComboBox" prefWidth="80"/>
+            </HBox>
+
+            <!-- Durée -->
+            <Label text="Durée (min) :" GridPane.rowIndex="2" GridPane.columnIndex="0"/>
+            <ComboBox fx:id="durationComboBox" prefWidth="150" GridPane.rowIndex="2" GridPane.columnIndex="1"/>
+        </GridPane>
+
+        <!-- Boutons d'action -->
+        <HBox spacing="15" alignment="CENTER_RIGHT">
+            <Button text="Annuler" onAction="#cancelAction" styleClass="cancel-button"/>
+            <Button text="Enregistrer les modifications" onAction="#updateReservationAction" styleClass="save-button"/>
+        </HBox>
+    </VBox>
+</AnchorPane>
Index: src/main/java/controllers/back/ListAvaibilityController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/controllers/back/ListAvaibilityController.java b/src/main/java/controllers/back/ListAvaibilityController.java
new file mode 100644
--- /dev/null	(date 1744686592297)
+++ b/src/main/java/controllers/back/ListAvaibilityController.java	(date 1744686592297)
@@ -0,0 +1,327 @@
+package controllers.back;
+
+import controllers.AjouterReservationController;
+import controllers.ReservationListController;
+import javafx.fxml.FXML;
+import javafx.fxml.FXMLLoader;
+import javafx.scene.Node;
+import javafx.scene.Parent;
+import javafx.scene.Scene;
+import javafx.scene.control.*;
+import javafx.scene.layout.AnchorPane;
+import javafx.scene.layout.StackPane;
+import javafx.scene.layout.VBox;
+import javafx.stage.Stage;
+import models.avaibility;
+import service.AvaibilityService;
+
+import java.io.IOException;
+import java.sql.SQLException;
+import java.time.LocalDate;
+import java.util.List;
+
+public class ListAvaibilityController {
+
+    @FXML private VBox cardsContainer;
+    @FXML private StackPane contentPane;
+    @FXML private AnchorPane addFormPane;
+    @FXML private AnchorPane detailsPane;
+
+    // Add form fields
+    @FXML private TextField dateField;
+    @FXML private TextField startTimeField;
+    @FXML private TextField endTimeField;
+    @FXML private TextField tutorIdField;
+
+    // Details view fields
+    @FXML private Label detailsDate;
+    @FXML private Label detailsTime;
+    @FXML private Label detailsTutor;
+
+
+
+    private Parent addFormNode;
+
+    private final AvaibilityService avaibilityService = new AvaibilityService();
+
+    @FXML
+    public void initialize() {
+        loadAvaibilityCards();
+        showOnly(getCardsScrollPane()); // Show only cards list at startup
+    }
+
+    // Update the loadAvaibilityCards method
+    private void loadAvaibilityCards() {
+        try {
+            List<avaibility> availabilities = avaibilityService.getAll();
+            cardsContainer.getChildren().clear();
+
+            // Get current date (without time)
+            LocalDate today = LocalDate.now();
+
+            for (avaibility avaibility : availabilities) {
+                // Parse the avaibility date
+                LocalDate avaibilityDate;
+                try {
+                    avaibilityDate = LocalDate.parse(avaibility.getDate());
+                } catch (Exception e) {
+                    // Skip if date format is invalid
+                    continue;
+                }
+
+                // Only show if avaibility date is today or in the future
+                if (!avaibilityDate.isBefore(today)) {
+                    AnchorPane card = createAvaibilityCard(avaibility);
+                    cardsContainer.getChildren().add(card);
+                }
+            }
+        } catch (SQLException e) {
+            e.printStackTrace();
+            showAlert("Error", "Failed to load availabilities: " + e.getMessage());
+        }
+    }
+    private AnchorPane createAvaibilityCard(avaibility avaibility) {
+        AnchorPane card = new AnchorPane();
+        card.setStyle("-fx-background-color: white; -fx-background-radius: 5; -fx-effect: dropshadow(three-pass-box, rgba(0,0,0,0.1), 5, 0, 0, 1);");
+        card.setPrefWidth(400);
+
+        Label dateLabel = new Label("Date: " + avaibility.getDate());
+        dateLabel.setLayoutX(15);
+        dateLabel.setLayoutY(15);
+
+        Label timeLabel = new Label("Time: " + avaibility.getStartTime() + " - " + avaibility.getEndTime());
+        timeLabel.setLayoutX(15);
+        timeLabel.setLayoutY(40);
+
+        Label tutorLabel = new Label("Tutor ID: " + avaibility.getTutorId());
+        tutorLabel.setLayoutX(15);
+        tutorLabel.setLayoutY(65);
+
+        Button detailsButton = new Button("Details");
+        detailsButton.setLayoutX(300);
+        detailsButton.setLayoutY(15);
+        detailsButton.setStyle("-fx-background-color: #607D8B; -fx-text-fill: white;");
+        detailsButton.setOnAction(event -> showDetails(avaibility));
+
+        Button reserveButton = new Button("Reserve");
+        reserveButton.setLayoutX(300);
+        reserveButton.setLayoutY(50);
+        reserveButton.setStyle("-fx-background-color: #4CAF50; -fx-text-fill: white;");
+        reserveButton.setOnAction(event -> handleReservation(avaibility));
+
+        // Add View Reservations button
+        Button viewReservationsButton = new Button("View Reservations");
+        viewReservationsButton.setLayoutX(300);
+        viewReservationsButton.setLayoutY(85);
+        viewReservationsButton.setStyle("-fx-background-color: #FF9800; -fx-text-fill: white;");
+        viewReservationsButton.setOnAction(event -> {
+            try {
+                FXMLLoader loader = new FXMLLoader(getClass().getResource("/reservation/list.fxml"));
+                Parent root = loader.load();
+
+                // Passe l'avaibilityId au contrôleur
+                ReservationListController controller = loader.getController();
+                controller.setAvaibilityId(avaibility.getId());
+
+                Stage stage = new Stage();
+                stage.setTitle("Reservations for Avaibility");
+                stage.setScene(new Scene(root));
+                stage.show();
+            } catch (IOException e) {
+                e.printStackTrace();
+            }
+        });
+
+
+        // Add Delete Button
+        Button deleteButton = new Button("Delete");
+        deleteButton.setLayoutX(300);
+        deleteButton.setLayoutY(120);
+        deleteButton.setStyle("-fx-background-color: #F44336; -fx-text-fill: white;");
+        deleteButton.setOnAction(event -> handleDeleteAvaibility(avaibility));
+
+        card.getChildren().addAll(dateLabel, timeLabel, tutorLabel, detailsButton, reserveButton, viewReservationsButton, deleteButton);
+        return card;
+    }
+    private void handleDeleteAvaibility(avaibility avaibility) {
+        Alert confirmAlert = new Alert(Alert.AlertType.CONFIRMATION);
+        confirmAlert.setTitle("Confirm Delete");
+        confirmAlert.setHeaderText("Delete Availability");
+        confirmAlert.setContentText("Are you sure you want to delete this availability?\nAll related reservations will be marked as canceled.");
+
+        // Show the confirmation dialog and wait for user response
+        confirmAlert.showAndWait().ifPresent(response -> {
+            if (response == ButtonType.OK) {
+                try {
+                    // Call service to delete availability with cascade
+                    avaibilityService.deleteCascade(avaibility.getId());
+                    showAlert("Success", "Availability deleted successfully");
+                    loadAvaibilityCards(); // Refresh the list
+                } catch (SQLException e) {
+                    e.printStackTrace();
+                    showAlert("Error", "Failed to delete availability: " + e.getMessage());
+                }
+            }
+        });
+    }
+
+   /* private void showReservationsForAvaibility(avaibility avaibility) {
+        try {
+            FXMLLoader loader = new FXMLLoader(getClass().getResource("/reservation/listReservations.fxml"));
+            Parent root = loader.load();
+
+            ListReservationController controller = loader.getController();
+            controller.setAvaibilityId(avaibility.getId());
+
+            Stage currentStage = (Stage) contentPane.getScene().getWindow();
+            double width = currentStage.getWidth();
+            double height = currentStage.getHeight();
+
+            Scene scene = new Scene(root, width, height);
+            currentStage.setScene(scene);
+            currentStage.show();
+        } catch (IOException e) {
+            e.printStackTrace();
+            showAlert("Error", "Could not load reservations view: " + e.getMessage());
+        }
+    }*/
+    @FXML
+    private void handleShowReservations() {
+        try {
+            FXMLLoader loader = new FXMLLoader(getClass().getResource("/reservation/list.fxml"));
+            Parent root = loader.load();
+
+            Stage currentStage = (Stage) contentPane.getScene().getWindow();
+            double width = currentStage.getWidth();
+            double height = currentStage.getHeight();
+
+            Scene scene = new Scene(root, width, height);
+
+            currentStage.setScene(scene);
+            currentStage.show();
+        } catch (IOException e) {
+            e.printStackTrace();
+            showAlert("Erreur", "Impossible de charger la liste des réservations : " + e.getMessage());
+        }
+    }
+
+
+    // Add this method to handle redirection to reservation creation
+    private void handleReservation(avaibility avaibility) {
+        try {
+            FXMLLoader loader = new FXMLLoader(getClass().getResource("/reservation/create.fxml"));
+            Parent root = loader.load();
+
+            // Optional: Pass avaibility data to the reservation controller
+            AjouterReservationController controller = loader.getController();
+            controller.setAvaibilityData(avaibility); // You'll need to create this method in ReservationCreateController
+
+            // Get current scene dimensions
+            Stage currentStage = (Stage) contentPane.getScene().getWindow();
+            double width = currentStage.getWidth();
+            double height = currentStage.getHeight();
+
+            // Create new scene with same dimensions
+            Scene scene = new Scene(root, width, height);
+
+            currentStage.setScene(scene);
+            currentStage.show();
+        } catch (IOException e) {
+            e.printStackTrace();
+            showAlert("Error", "Could not load reservation form: " + e.getMessage());
+        }
+    }
+
+    @FXML
+    private void handleAddAvaibility() {
+        try {
+            FXMLLoader loader = new FXMLLoader(getClass().getResource("/avaibility/create.fxml"));
+            Parent root = loader.load();
+
+            // Get current scene dimensions
+            Stage currentStage = (Stage) contentPane.getScene().getWindow();
+            double width = currentStage.getWidth();
+            double height = currentStage.getHeight();
+
+            // Create new scene with the same dimensions
+            Scene scene = new Scene(root, width, height);
+
+            currentStage.setScene(scene);
+            currentStage.show();
+        } catch (IOException e) {
+            e.printStackTrace();
+        }
+    }
+
+
+    @FXML
+    private void handleSaveAvaibility() {
+        try
+        {
+            avaibility newAvaibility = new avaibility(
+                    0,
+                    dateField.getText(),
+                    startTimeField.getText(),
+                    endTimeField.getText(),
+                    Integer.parseInt(tutorIdField.getText())
+            );
+
+            avaibilityService.add(newAvaibility);
+            showAlert("Success", "Avaibility added successfully");
+
+            backToListView();
+            loadAvaibilityCards();
+        } catch (NumberFormatException e) {
+            showAlert("Error", "Please enter a valid Tutor ID");
+        } catch (SQLException e) {
+            showAlert("Error", "Failed to add avaibility: " + e.getMessage());
+        }
+    }
+
+    @FXML
+    private void handleCancelAdd() {
+        backToListView();
+    }
+
+    private void showDetails(avaibility avaibility) {
+        detailsDate.setText("Date: " + avaibility.getDate());
+        detailsTime.setText("Time: " + avaibility.getStartTime() + " - " + avaibility.getEndTime());
+        detailsTutor.setText("Tutor ID: " + avaibility.getTutorId());
+
+        showOnly(detailsPane);
+    }
+
+    @FXML
+    private void handleBackToList() {
+        backToListView();
+    }
+
+    private void backToListView() {
+        showOnly(getCardsScrollPane());
+    }
+
+    // Utility: Show only the selected node in StackPane
+    private void showOnly(Node nodeToShow) {
+        for (Node child : contentPane.getChildren()) {
+            child.setVisible(child == nodeToShow);
+        }
+    }
+
+    // Helper to find the ScrollPane holding the cards
+    private ScrollPane getCardsScrollPane() {
+        for (Node child : contentPane.getChildren()) {
+            if (child instanceof ScrollPane && ((ScrollPane) child).getContent() == cardsContainer) {
+                return (ScrollPane) child;
+            }
+        }
+        return null;
+    }
+
+    private void showAlert(String title, String message) {
+        Alert alert = new Alert(Alert.AlertType.INFORMATION);
+        alert.setTitle(title);
+        alert.setHeaderText(null);
+        alert.setContentText(message);
+        alert.showAndWait();
+    }
+}
Index: src/main/java/controllers/back/AjouterAvaibilityController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/controllers/back/AjouterAvaibilityController.java b/src/main/java/controllers/back/AjouterAvaibilityController.java
new file mode 100644
--- /dev/null	(date 1744686592254)
+++ b/src/main/java/controllers/back/AjouterAvaibilityController.java	(date 1744686592254)
@@ -0,0 +1,279 @@
+package controllers.back;
+
+import javafx.collections.FXCollections;
+import javafx.collections.ObservableList;
+import javafx.event.ActionEvent;
+import javafx.fxml.FXML;
+import javafx.fxml.FXMLLoader;
+import javafx.fxml.Initializable;
+import javafx.scene.Parent;
+import javafx.scene.Scene;
+import javafx.scene.control.*;
+import javafx.scene.layout.AnchorPane;
+import javafx.scene.layout.StackPane;
+import javafx.stage.Stage;
+import models.avaibility;
+import service.AvaibilityService;
+
+import java.io.IOException;
+import java.net.URL;
+import java.sql.SQLException;
+import java.time.LocalDate;
+import java.time.LocalTime;
+import java.time.ZoneId;
+import java.util.Date;
+import java.util.ResourceBundle;
+
+public class AjouterAvaibilityController implements Initializable {
+
+    @FXML
+    private DatePicker datePicker;
+
+    @FXML
+    private ComboBox<String> startHourComboBox;
+
+    @FXML
+    private ComboBox<String> startMinuteComboBox;
+
+    @FXML
+    private ComboBox<String> endHourComboBox;
+
+    @FXML
+    private ComboBox<String> endMinuteComboBox;
+
+    @FXML
+    private Label dateErrorLabel;
+
+    @FXML
+    private Label startTimeErrorLabel;
+
+    @FXML
+    private Label endTimeErrorLabel;
+
+    @Override
+    public void initialize(URL url, ResourceBundle rb) {
+        ObservableList<String> hours = FXCollections.observableArrayList();
+        ObservableList<String> minutes = FXCollections.observableArrayList();
+
+        for (int i = 0; i < 24; i++) {
+            hours.add(String.format("%02d", i));
+        }
+
+        for (int i = 0; i < 60; i += 5) {
+            minutes.add(String.format("%02d", i));
+        }
+
+        startHourComboBox.setItems(hours);
+        startMinuteComboBox.setItems(minutes);
+        endHourComboBox.setItems(hours);
+        endMinuteComboBox.setItems(minutes);
+
+        // Valeurs par défaut
+        datePicker.setValue(LocalDate.now());
+        startHourComboBox.setValue("09");
+        startMinuteComboBox.setValue("00");
+        endHourComboBox.setValue("10");
+        endMinuteComboBox.setValue("00");
+
+        // Restrict date selection to only today and next month
+        datePicker.setDayCellFactory(picker -> new DateCell() {
+            @Override
+            public void updateItem(LocalDate date, boolean empty) {
+                super.updateItem(date, empty);
+                LocalDate today = LocalDate.now();
+                LocalDate oneMonthLater = today.plusMonths(1);
+
+                setDisable(empty || date.compareTo(today) < 0 || date.compareTo(oneMonthLater) > 0);
+
+                if (date.compareTo(today) < 0 || date.compareTo(oneMonthLater) > 0) {
+                    setStyle("-fx-background-color: #ffc0cb;"); // Light red for invalid dates
+                }
+            }
+        });
+
+        dateErrorLabel.setVisible(false);
+        startTimeErrorLabel.setVisible(false);
+        endTimeErrorLabel.setVisible(false);
+
+        // Add listeners to validate end time > start time when selection changes
+        startHourComboBox.getSelectionModel().selectedItemProperty().addListener((obs, oldVal, newVal) -> validateTimes());
+        startMinuteComboBox.getSelectionModel().selectedItemProperty().addListener((obs, oldVal, newVal) -> validateTimes());
+        endHourComboBox.getSelectionModel().selectedItemProperty().addListener((obs, oldVal, newVal) -> validateTimes());
+        endMinuteComboBox.getSelectionModel().selectedItemProperty().addListener((obs, oldVal, newVal) -> validateTimes());
+    }
+    @FXML private AnchorPane createFormRoot;
+    @FXML private StackPane contentPane;
+
+
+
+
+    @FXML
+    private void handleCancelOrBack() {
+        try {
+            FXMLLoader loader = new FXMLLoader(getClass().getResource("/avaibility/listCards.fxml"));
+            Parent root = loader.load();
+
+            // Get current scene dimensions
+            Stage currentStage = (Stage) contentPane.getScene().getWindow();
+            double width = currentStage.getWidth();
+            double height = currentStage.getHeight();
+
+            // Create new scene with the same dimensions
+            Scene scene = new Scene(root, width, height);
+
+            currentStage.setScene(scene);
+            currentStage.show();
+        } catch (IOException e) {
+            e.printStackTrace();
+        }
+    }
+    private void validateTimes() {
+        String sh = startHourComboBox.getValue();
+        String sm = startMinuteComboBox.getValue();
+        String eh = endHourComboBox.getValue();
+        String em = endMinuteComboBox.getValue();
+
+        // Only validate if all values are selected
+        if (sh != null && sm != null && eh != null && em != null) {
+            try {
+                LocalTime start = LocalTime.of(Integer.parseInt(sh), Integer.parseInt(sm));
+                LocalTime end = LocalTime.of(Integer.parseInt(eh), Integer.parseInt(em));
+
+                if (!start.isBefore(end)) {
+                    endTimeErrorLabel.setText("L'heure de fin doit être après l'heure de début.");
+                    endTimeErrorLabel.setVisible(true);
+                } else {
+                    endTimeErrorLabel.setVisible(false);
+                }
+            } catch (NumberFormatException e) {
+                // Handle parsing errors
+            }
+        }
+    }
+
+    @FXML
+    void saveavaibilityAction(ActionEvent event) {
+        dateErrorLabel.setVisible(false);
+        startTimeErrorLabel.setVisible(false);
+        endTimeErrorLabel.setVisible(false);
+
+        boolean hasError = false;
+
+        try {
+            // Vérification date
+            LocalDate date = datePicker.getValue();
+            LocalDate today = LocalDate.now();
+            LocalDate oneMonthLater = today.plusMonths(1);
+
+            if (date == null) {
+                dateErrorLabel.setText("Veuillez sélectionner une date.");
+                dateErrorLabel.setVisible(true);
+                hasError = true;
+            } else if (date.isBefore(today)) {
+                dateErrorLabel.setText("La date ne peut pas être dans le passé.");
+                dateErrorLabel.setVisible(true);
+                hasError = true;
+            } else if (date.isAfter(oneMonthLater)) {
+                dateErrorLabel.setText("La date ne peut pas être plus d'un mois dans le futur.");
+                dateErrorLabel.setVisible(true);
+                hasError = true;
+            }
+
+            // Vérification heures
+            String sh = startHourComboBox.getValue();
+            String sm = startMinuteComboBox.getValue();
+            String eh = endHourComboBox.getValue();
+            String em = endMinuteComboBox.getValue();
+
+            if (sh == null || sm == null) {
+                startTimeErrorLabel.setText("Veuillez sélectionner une heure de début.");
+                startTimeErrorLabel.setVisible(true);
+                hasError = true;
+            }
+
+            if (eh == null || em == null) {
+                endTimeErrorLabel.setText("Veuillez sélectionner une heure de fin.");
+                endTimeErrorLabel.setVisible(true);
+                hasError = true;
+            }
+
+            if (hasError) return;
+
+            LocalTime start = LocalTime.of(Integer.parseInt(sh), Integer.parseInt(sm));
+            LocalTime end = LocalTime.of(Integer.parseInt(eh), Integer.parseInt(em));
+
+            if (!start.isBefore(end)) {
+                endTimeErrorLabel.setText("L'heure de fin doit être après l'heure de début.");
+                endTimeErrorLabel.setVisible(true);
+                return;
+            }
+
+            // Conversion
+            Date startTime = Date.from(date.atTime(start).atZone(ZoneId.systemDefault()).toInstant());
+            Date endTime = Date.from(date.atTime(end).atZone(ZoneId.systemDefault()).toInstant());
+
+            int tutorId = 1; // temporaire, à remplacer par l'utilisateur connecté
+
+            avaibility availability = new avaibility(date.toString(), start.toString(), end.toString(), tutorId);
+            AvaibilityService service = new AvaibilityService();
+            service.add(availability);
+
+            showAlert(Alert.AlertType.INFORMATION, "Succès", "Disponibilité ajoutée avec succès !");
+            // Redirection
+            FXMLLoader loader = new FXMLLoader(getClass().getResource("/avaibility/details.fxml"));
+            Parent root = loader.load();
+
+
+            // Get the controller and pass the availability
+            DetailAvaibilityController detailController = loader.getController();
+
+// Either pass the availability object directly
+            detailController.setAvaibility(availability);
+// OR pass the ID (if you have it after adding to database)
+// detailController.loadAvaibility(availability.getId());
+
+            datePicker.getScene().setRoot(root);
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+            datePicker.getScene().setRoot(root);
+
+        } catch (SQLException | IOException e) {
+            e.printStackTrace();
+            showAlert(Alert.AlertType.ERROR, "Erreur", "Une erreur est survenue: " + e.getMessage());
+        }
+    }
+
+    @FXML
+    void cancelAction(ActionEvent event) {
+        try {
+            FXMLLoader loader = new FXMLLoader(getClass().getResource("/avaibility/list.fxml"));
+            Parent root = loader.load();
+            datePicker.getScene().setRoot(root);
+        } catch (IOException e) {
+            e.printStackTrace();
+            showAlert(Alert.AlertType.ERROR, "Erreur", "Erreur lors de la navigation: " + e.getMessage());
+        }
+    }
+
+    private void showAlert(Alert.AlertType type, String title, String message) {
+        Alert alert = new Alert(type);
+        alert.setTitle(title);
+        alert.setHeaderText(null);
+        alert.setContentText(message);
+        alert.showAndWait();
+    }
+}
\ No newline at end of file
Index: src/main/java/controllers/back/DetailAvaibilityController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/controllers/back/DetailAvaibilityController.java b/src/main/java/controllers/back/DetailAvaibilityController.java
new file mode 100644
--- /dev/null	(date 1744686592267)
+++ b/src/main/java/controllers/back/DetailAvaibilityController.java	(date 1744686592267)
@@ -0,0 +1,148 @@
+package controllers.back;
+
+import javafx.event.ActionEvent;
+import javafx.fxml.FXML;
+import javafx.fxml.FXMLLoader;
+import javafx.fxml.Initializable;
+import javafx.scene.Parent;
+import javafx.scene.control.Alert;
+import javafx.scene.control.Label;
+import models.avaibility;
+import service.AvaibilityService;
+
+import java.io.IOException;
+import java.net.URL;
+import java.sql.SQLException;
+import java.time.Duration;
+import java.time.LocalTime;
+import java.util.ResourceBundle;
+
+public class DetailAvaibilityController implements Initializable {
+
+    @FXML
+    private Label dateLabel;
+
+    @FXML
+    private Label startTimeLabel;
+
+    @FXML
+    private Label endTimeLabel;
+
+    @FXML
+    private Label durationLabel;
+
+    @FXML
+    private Label tutorLabel;
+
+    @FXML
+    private Label statusLabel;
+
+    private avaibility currentAvaibility;
+    private AvaibilityService avaibilityService;
+
+    @Override
+    public void initialize(URL url, ResourceBundle rb) {
+        avaibilityService = new AvaibilityService();
+    }
+
+    public void setAvaibility(avaibility avaibility) {
+        this.currentAvaibility = avaibility;
+        populateFields();
+    }
+
+    public void loadAvaibility(int id) {
+        try {
+            currentAvaibility = avaibilityService.getById(id);
+            if(currentAvaibility != null) {
+                populateFields();
+            } else {
+                showAlert(Alert.AlertType.ERROR, "Erreur", "Disponibilité non trouvée.");
+                backAction(null);
+            }
+        } catch (SQLException e) {
+            showAlert(Alert.AlertType.ERROR, "Erreur", "Erreur lors du chargement de la disponibilité: " + e.getMessage());
+        }
+    }
+
+    private void populateFields() {
+        if(currentAvaibility == null) return;
+
+        // Format date
+        dateLabel.setText(currentAvaibility.getDate());
+
+        // Format start time
+        startTimeLabel.setText(currentAvaibility.getStartTime());
+
+        // Format end time
+        endTimeLabel.setText(currentAvaibility.getEndTime());
+
+        // Calculate duration
+        try {
+            LocalTime start = LocalTime.parse(currentAvaibility.getStartTime());
+            LocalTime end = LocalTime.parse(currentAvaibility.getEndTime());
+            Duration duration = Duration.between(start, end);
+            long hours = duration.toHours();
+            long minutes = duration.toMinutesPart();
+
+            if (hours > 0) {
+                durationLabel.setText(hours + "h" + (minutes > 0 ? " " + minutes + "min" : ""));
+            } else {
+                durationLabel.setText(minutes + " minutes");
+            }
+        } catch (Exception e) {
+            durationLabel.setText("Non disponible");
+        }
+
+        // Set tutor information - replace with actual tutor name retrieval
+        tutorLabel.setText("Tuteur ID: " + currentAvaibility.getTutorId());
+
+        // Set status - this would be based on your business logic
+        statusLabel.setText("Disponible");
+    }
+
+    @FXML
+    void backAction(ActionEvent event) {
+        try {
+            FXMLLoader loader = new FXMLLoader(getClass().getResource("/avaibility/listCards.fxml"));
+            Parent root = loader.load();
+            dateLabel.getScene().setRoot(root);
+        } catch (IOException e) {
+            showAlert(Alert.AlertType.ERROR, "Erreur", "Erreur lors de la navigation: " + e.getMessage());
+        }
+    }
+
+    @FXML
+    void handleDelete(ActionEvent event) {
+        try {
+            avaibilityService.delete(currentAvaibility.getId());
+            showAlert(Alert.AlertType.INFORMATION, "Succès", "Disponibilité supprimée avec succès.");
+            backAction(null);
+        } catch (SQLException e) {
+            showAlert(Alert.AlertType.ERROR, "Erreur", "Erreur lors de la suppression: " + e.getMessage());
+        }
+    }
+
+   @FXML
+    void handleUpdate(ActionEvent event) {
+        try {
+            FXMLLoader loader = new FXMLLoader(getClass().getResource("/avaibility/update.fxml"));
+            Parent root = loader.load();
+
+            // Get the controller and pass the availability
+            ModifierAvaibilityController controller = loader.getController();
+            controller.setAvaibilityToUpdate(currentAvaibility);
+
+            dateLabel.getScene().setRoot(root);
+        } catch (IOException e) {
+            showAlert(Alert.AlertType.ERROR, "Erreur", "Erreur lors de la navigation: " + e.getMessage());
+        }
+    }
+
+    private void showAlert(Alert.AlertType type, String title, String message) {
+        Alert alert = new Alert(type);
+        alert.setTitle(title);
+        alert.setHeaderText(null);
+        alert.setContentText(message);
+        alert.showAndWait();
+    }
+}
\ No newline at end of file
